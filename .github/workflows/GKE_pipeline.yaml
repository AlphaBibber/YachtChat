name: Build and Deploy to GKE

on:
  push:
    branches:
#      - main
       - devops/migrationtoGKE
       - devops/migrationtoGKEusingHELM
  
  workflow_dispatch: 

env:
  PROJECT_ID: ${{secrets.GKE_PROJECT}}
  GKE_CLUSTER: alphabibber-gke-prod
  GKE_ZONE: europe-west3
  FRONTEND_IMAGE: frontend-image
  LANDINGPAGE_IMAGE: landingpage-image
  PRESENTATION_IMAGE: presentation-image
  WEBSOCKET_IMAGE: websocket-image
  SPACES_IMAGE: spaces-image
  AUTH_IMAGE: auth-image
  GKE_FRONTEND_URL: gke.alphabibber.com
  GKE_SPACES_URL: spaces.gke.alphabibber.com
  GKE_WEBSOCKET_URL: websocket.gke.alphabibber.com
  GKE_AUTH_URL: auth.gke.alphabibber.com
  GKE_WEBSOCKET_PORT: 8085
  GKE_SPACES_PORT: 8081
  GKE_FRONTEND_PORT: 80
  GKE_AUTH_PORT: 8080
  WEBSOCKET_TIMEOUT: 28800
  GKE_FRONTEND_REPLICAS: 1
  GKE_WEBSOCKET_REPLICAS: 1
  GKE_SPACES_REPLICAS: 1
  GKE_AUTH_REPLICAS: 1
  TAG: 1.0.0

jobs:
  setup-build-publish-deploy:
    name: Setup Build Publish Deploy
    runs-on: ubuntu-latest

    steps:

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 11
          server-id: github
          settings-path: ${{ github.workspace }}

      - name: Build with Maven spaces-service
        run: mvn clean -f ./spaces-service/pom.xml package -DskipTests
      - name: Build with Maven websocket-server
        run: mvn clean -f ./websocket-service/pom.xml package -DskipTests
      - name: Build with Maven auth-server
        run: mvn clean -f ./auth-service/pom.xml package -DskipTests

      # Setup gcloud CLI
      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
           service_account_key: ${{ secrets.GKE_SA_KEY }}
           project_id: ${{ secrets.GKE_PROJECT }}

      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Configure docker
        run: |-
          gcloud --quiet auth configure-docker

      # Get the GKE credentials so we can deploy to the cluster
      - name: Get the GKE credentials to deploy
        uses: google-github-actions/get-gke-credentials@v0.2.1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GKE_SA_KEY }}

      # Build the Docker image
      - name: Build frontend image
        run: |-
          docker build \
          --file ./frontend/Dockerfile \
          --tag "gcr.io/$PROJECT_ID/$FRONTEND_IMAGE:$TAG" \
          --build-arg REACT_APP_SIGNAL_URL=$GKE_WEBSOCKET_URL \
          --build-arg REACT_APP_SPACES_URL=$GKE_SPACES_URL \
          --build-arg REACT_APP_AUTH_URL=$GKE_AUTH_URL \
          ./frontend
      # Build the Docker image
#      - name: Build landingpage image
#        run: |-
#          docker build \
#          --file ./landingpage/Dockerfile
#          --tag "gcr.io/$PROJECT_ID/$LANDINGPAGE_IMAGE:$TAG" \
#          .
      # Build the Docker image
#      - name: Build presentation image
#        run: |-
#          docker build \
#          --file ./presentation/Dockerfile
#          --tag "gcr.io/$PROJECT_ID/$PRESENTATION_IMAGE:$TAG" \
#          .
#       Build the Docker image
      - name: Build websocket-service image
        run: |-
          docker build \
          --file ./websocket-service/Dockerfile \
          --tag "gcr.io/$PROJECT_ID/$WEBSOCKET_IMAGE:$TAG" \
          --build-arg SPACES_URL=$GKE_SPACES_URL \
          --build-arg VIRTUAL_PORT=$GKE_WEBSOCKET_PORT \
          ./websocket-service
#       Build the Docker image
      - name: Build spacesService image
        run: |-
          docker build \
          --file ./spaces-service/Dockerfile \
          --tag "gcr.io/$PROJECT_ID/$SPACES_IMAGE:$TAG" \
          --build-arg VIRTUAL_PORT=$GKE_SPACES_PORT \
          ./spaces-service
      - name: Build authService image
        run: |-
          docker build \
          --file ./auth-service/Dockerfile \
          --tag "gcr.io/$PROJECT_ID/$AUTH_IMAGE:$TAG" \
          --build-arg VIRTUAL_PORT=$GKE_AUTH_PORT \
          --build-arg OAUTH_GOOGLE_CLIENT_ID=${{ secrets.OAUTH_GOOGLE_CLIENT_ID }} \
          --build-arg OAUTH_GOOGLE_CLIENT_SECRET=${{ secrets.OAUTH_GOOGLE_CLIENT_SECRET }} \
          ./auth-service

      - name: Publish frontend Docker Image to GCR
        run: |-
          docker push "gcr.io/$PROJECT_ID/$FRONTEND_IMAGE:$TAG"
#      - name: Publish landingpage Docker Image to GCR
#        run: |-
#          docker push "gcr.io/$PROJECT_ID/$LANDINGPAGE_IMAGE:$TAG"
#      - name: Publish presentation Docker Image to GCR
#        run: |-
#          docker push "gcr.io/$PROJECT_ID/$PRESENTATION_IMAGE:$TAG"
      - name: Publish signalingServer Docker Image to GCR
        run: |-
          docker push "gcr.io/$PROJECT_ID/$WEBSOCKET_IMAGE:$TAG"
      - name: Publish spacesServer Docker Image to GCR
        run: |-
          docker push "gcr.io/$PROJECT_ID/$SPACES_IMAGE:$TAG"
      - name: Publish authServer Docker Image to GCR
        run: |-
          docker push "gcr.io/$PROJECT_ID/$AUTH_IMAGE:$TAG"

      # inject data in yaml files and deploy them to gke
      - name: pipe yaml files, replace env vars and apply to kubernetes
        run: cat ./kubernetes/deployment.yaml ./kubernetes/service.yaml ./kubernetes/ingress.yaml | sed "s/\bGKE_FRONTEND_URL\b/$GKE_FRONTEND_URL/g;
          s/\bGKE_SPACES_URL\b/$GKE_SPACES_URL/g;
          s/\bGKE_WEBSOCKET_URL\b/$GKE_WEBSOCKET_URL/g;
          s/\bGKE_AUTH_URL\b/$GKE_AUTH_URL/g;
          s/\bGKE_WEBSOCKET_PORT\b/$GKE_WEBSOCKET_PORT/g;
          s/\bGKE_SPACES_PORT\b/$GKE_SPACES_PORT/g;
          s/\bGKE_FRONTEND_PORT\b/$GKE_FRONTEND_PORT/g;
          s/\bGKE_AUTH_PORT\b/$GKE_AUTH_PORT/g;
          s/\bWEBSOCKET_TIMEOUT\b/$WEBSOCKET_TIMEOUT/g;
          s/\bGKE_FRONTEND_REPLICAS\b/$GKE_FRONTEND_REPLICAS/g;
          s/\bGKE_WEBSOCKET_REPLICAS\b/$GKE_WEBSOCKET_REPLICAS/g;
          s/\bGKE_AUTH_REPLICAS\b/$GKE_AUTH_REPLICAS/g;
          s/\bPROJECT_ID\b/$PROJECT_ID/g;
          s/\bFRONTEND_IMAGE\b/$FRONTEND_IMAGE/g;
          s/\bWEBSOCKET_IMAGE\b/$WEBSOCKET_IMAGE/g;
          s/\bSPACES_IMAGE\b/$SPACES_IMAGE/g;
          s/\bAUTH_IMAGE\b/$AUTH_IMAGE/g;
          s/\bTAG\b/$TAG/g;
          s/\bGKE_SPACES_REPLICAS\b/$GKE_SPACES_REPLICAS/g" | kubectl apply -f -


