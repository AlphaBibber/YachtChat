name: Build and Deploy to GKE

on:
  push:
    branches:
#      - main
       - devops/migrationtoGKE

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PROJECT_ID: ${{secrets.GKE_PROJECT}}
  GKE_CLUSTER: alphabibber-gke
  GKE_ZONE: europe-west3
  FRONTEND_DEPLOYMENT_NAME: frontend-app
  LANDINGPAGE_DEPLOYMENT_NAME: landingpage-app
  PRESENTATION_DEPLOYMENT_NAME: presentation-app
  SIGNALING_DEPLOYMENT_NAME: signalingserver-app
  SPACES_DEPLOYMENT_NAME: spacesservice-app
  FRONTEND_IMAGE: frontend-image
  LANDINGPAGE_IMAGE: landingpage-image
  PRESENTATION_IMAGE: presentation-image
  SIGNALING_IMAGE: signaling-image
  SPACES_IMAGE: spaces-image
  TAG: 1.0.0

jobs:
  setup-build-publish-deploy:
    name: Setup Build Publish Deploy
    runs-on: ubuntu-latest

    steps:

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 11
          server-id: github
          settings-path: ${{ github.workspace }}

      - name: Build with Maven
        run: mvn clean -f ./spaces-service/pom.xml package -DskipTests

      # Setup gcloud CLI
      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
           service_account_key: ${{ secrets.GKE_SA_KEY }}
           project_id: ${{ secrets.GKE_PROJECT }}

      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Configure docker
        run: |-
          gcloud --quiet auth configure-docker

      # Get the GKE credentials so we can deploy to the cluster
      - name: Get the GKE credentials to deploy
        uses: google-github-actions/get-gke-credentials@v0.2.1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GKE_SA_KEY }}

      # Build the Docker image
      - name: Build frontend image
        run: |-
          docker build \
          --file ./frontend/Dockerfile \
          --tag "gcr.io/$PROJECT_ID/$FRONTEND_IMAGE:$TAG" \
          --build-arg REACT_APP_SIGNAL_URL=${SIGNAL_URL} \
          --build-arg REACT_APP_SIGNAL_PORT=${SIGNAL_PORT} \
          --build-arg REACT_APP_SPACES_URL=${SPACES_URL} \
          .
      # Build the Docker image
#      - name: Build landingpage image
#        run: |-
#          docker build \
#          --file ./landingpage/Dockerfile
#          --tag "gcr.io/$PROJECT_ID/$LANDINGPAGE_IMAGE:$TAG" \
#          .
      # Build the Docker image
#      - name: Build presentation image
#        run: |-
#          docker build \
#          --file ./presentation/Dockerfile
#          --tag "gcr.io/$PROJECT_ID/$PRESENTATION_IMAGE:$TAG" \
#          .
      # Build the Docker image
      - name: Build signalingServer image
        run: |-
          docker build \
          --file ./signalingServer/Dockerfile \
          --tag "gcr.io/$PROJECT_ID/$SIGNALING_IMAGE:$TAG" \
          --build-arg VIRTUAL_HOST=${SIGNAL_URL} \
          --build-arg VIRTUAL_PORT=${SIGNAL_PORT} \
          .
      # Build the Docker image
      - name: Build spacesService image
        run: |-
          docker build \
          --file ./spaces-service/Dockerfile \
          --tag "gcr.io/$PROJECT_ID/$SPACES_IMAGE:$TAG" \
          --build-arg VIRTUAL_PORT=${SPACES_PORT} \
          .

      - name: Publish frontend Docker Image to GCR
        run: |-
          docker push "gcr.io/$PROJECT_ID/$FRONTEND_IMAGE:$TAG"
#      - name: Publish landingpage Docker Image to GCR
#        run: |-
#          docker push "gcr.io/$PROJECT_ID/$LANDINGPAGE_IMAGE:$TAG"
#      - name: Publish presentation Docker Image to GCR
#        run: |-
#          docker push "gcr.io/$PROJECT_ID/$PRESENTATION_IMAGE:$TAG"
      - name: Publish signalingServer Docker Image to GCR
        run: |-
          docker push "gcr.io/$PROJECT_ID/$SIGNALING_IMAGE:$TAG"
      - name: Publish spacesServer Docker Image to GCR
        run: |-
          docker push "gcr.io/$PROJECT_ID/$SPACES_IMAGE:$TAG"

      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      - name: Deploy frontend Image to GKE cluster
        run: |-
          ./kustomize edit set image gcr.io/PROJECT_ID/FRONTEND_IMAGE:TAG=gcr.io/$PROJECT_ID/$FRONTEND_IMAGE:$TAG
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$FRONTEND_DEPLOYMENT_NAME
          kubectl get services -o wide

#      - name: Deploy landingpage Image to GKE cluster
#        run: |-
#          ./kustomize edit set image gcr.io/PROJECT_ID/LANDINGPAGE_IMAGE:TAG=gcr.io/$PROJECT_ID/$LANDINGPAGE_IMAGE:$TAG
#          ./kustomize build . | kubectl apply -f -
#          kubectl rollout status deployment/$LANDINGPAGE_DEPLOYMENT_NAME
#          kubectl get services -o wide

#      - name: Deploy presentation Image to GKE cluster
#        run: |-
#          ./kustomize edit set image gcr.io/PROJECT_ID/PRESENTATION_IMAGE:TAG=gcr.io/$PROJECT_ID/$PRESENTATION_IMAGE:$TAG
#          ./kustomize build . | kubectl apply -f -
#          kubectl rollout status deployment/$PRESENTATION_DEPLOYMENT_NAME
#          kubectl get services -o wide

      - name: Deploy signalingServer Image to GKE cluster
        run: |-
          ./kustomize edit set image gcr.io/PROJECT_ID/SIGNALING_IMAGE:TAG=gcr.io/$PROJECT_ID/$SIGNALING_IMAGE:$TAG
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$SIGNALING_DEPLOYMENT_NAME
          kubectl get services -o wide

      - name: Deploy spacesService Image to GKE cluster
        run: |-
          ./kustomize edit set image gcr.io/PROJECT_ID/SPACES_IMAGE:TAG=gcr.io/$PROJECT_ID/$SPACES_IMAGE:$TAG
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$SPACES_DEPLOYMENT_NAME
          kubectl get services -o wide
